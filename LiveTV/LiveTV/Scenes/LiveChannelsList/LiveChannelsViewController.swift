//
//  LiveChannelsViewController.swift
//  LiveTV
//
//  Created by Mihai Pantiru on 06/03/2017.
//  Copyright (c) 2017 AgileFreaks. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import UIKit

protocol LiveChannelsViewControllerInput {
    func displaySomething(viewModel: LiveChannels.Load.ViewModel)
}

protocol LiveChannelsViewControllerOutput {
    func perform(request: LiveChannels.Load.Request)
}

protocol LiveChannelsViewControllerExpandDelegate: NSObjectProtocol {
    func expandChannel(channel: LiveChannel)
}

let channelCollectionCellId = "channelCollectionCellIdentifier"

class LiveChannelsViewController: UIViewController, LiveChannelsViewControllerInput, UICollectionViewDataSource, UICollectionViewDelegate, UICollectionViewDelegateFlowLayout {
    var output: LiveChannelsViewControllerOutput!
    var router: LiveChannelsRouterInput!

    @IBOutlet weak var collectionView: UICollectionView?

    var viewModel: LiveChannels.Load.ViewModel = LiveChannels.Load.ViewModel(liveChannelsViewModels: [])

    weak var delegate: LiveChannelsViewControllerExpandDelegate?

    var videoCells: [Int: ChannelCollectionViewCell] = [:]
    var selectedIndex: Int = 0

    // MARK: - Object lifecycle

    override func awakeFromNib() {
        super.awakeFromNib()
        LiveChannelsConfigurator.sharedInstance.configure(viewController: self)
    }

    // MARK: - View lifecycle

    override func viewDidLoad() {
        super.viewDidLoad()

        collectionViewSetup()
        doSomethingOnLoad()
    }

    func collectionViewSetup() {
        self.collectionView?.register(UINib(nibName: "ChannelCollectionViewCell", bundle: nil), forCellWithReuseIdentifier: channelCollectionCellId)
    }

    // MARK: - Event handling

    func doSomethingOnLoad() {
        let request = LiveChannels.Load.Request()
        output.perform(request: request)
    }

    func selectChannel(at index: Int) {
        let model = self.viewModel.liveChannelsViewModels[index]
        self.delegate?.expandChannel(channel: model.liveChannel)
        self.markSelectedChannel(at: index)
    }

    func markSelectedChannel(at index: Int) {
        let oldSelectedCell = self.videoCells[self.selectedIndex]
        oldSelectedCell?.setSelectedState(state: false)

        let newSelectedCell = self.videoCells[index]
        newSelectedCell?.setSelectedState(state: true)

        self.selectedIndex = index
    }

    // MARK: - Display logic

    func displaySomething(viewModel: LiveChannels.Load.ViewModel) {
        self.viewModel = viewModel
        self.videoCells.removeAll()

        UIView.animate(withDuration: 0.0, animations: { [weak self] in
            guard let strongSelf = self else { return }
            strongSelf.collectionView?.reloadData()
        }, completion: { [weak self] _ in
            self?.selectChannel(at: 0)
        })
    }

    // MARK: - Collection view data source
    func collectionView(_: UICollectionView, numberOfItemsInSection _: Int) -> Int {
        return self.viewModel.liveChannelsViewModels.count
    }

    func collectionView(_: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        return self.loadCell(for: indexPath)
    }

    func loadCell(for indexPath: IndexPath) -> ChannelCollectionViewCell {
        if let cell = self.videoCells[indexPath.row] {
            return cell
        }

        let newCell = self.createCell(for: indexPath)
        self.videoCells[indexPath.row] = newCell

        return newCell
    }

    func createCell(for indexPath: IndexPath) -> ChannelCollectionViewCell {
        let cell = self.collectionView?.dequeueReusableCell(withReuseIdentifier: channelCollectionCellId, for: indexPath) as! ChannelCollectionViewCell
        let model = self.viewModel.liveChannelsViewModels[indexPath.row]
        cell.configure(with: model)

        cell.accessibilityIdentifier = "channelCell_\(indexPath.row)"
        cell.accessibilityValue = "Playing \(model.nameString)"
        cell.selectedOverlay.accessibilityIdentifier = "channelSelectedOverlay_\(indexPath.row)"

        return cell
    }

    func collectionView(_ collectionView: UICollectionView,
                        layout _: UICollectionViewLayout,
                        sizeForItemAt _: IndexPath) -> CGSize {
        let width = (collectionView.width - 50) / 2
        let size = CGSize(width: width, height: collectionView.height)
        return size
    }

    func collectionView(_: UICollectionView, didSelectItemAt indexPath: IndexPath) {
        self.selectChannel(at: indexPath.row)
    }
}
