//
//  LiveChannelsViewController.swift
//  LiveTV
//
//  Created by Mihai Pantiru on 06/03/2017.
//  Copyright (c) 2017 AgileFreaks. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import UIKit

protocol LiveChannelsViewControllerInput {
    func displaySomething(viewModel: LiveChannels.Load.ViewModel)
}

protocol LiveChannelsViewControllerOutput {
    func perform(request: LiveChannels.Load.Request)
}

protocol LiveChannelsViewControllerExpandDelegate: NSObjectProtocol {
    func expandChannel(channel: LiveChannel)
}

let channelCollectionCellId = "channelCollectionCellIdentifier"

class LiveChannelsViewController: UIViewController, LiveChannelsViewControllerInput, UICollectionViewDataSource, UICollectionViewDelegate, UICollectionViewDelegateFlowLayout {
    var output: LiveChannelsViewControllerOutput!
    var router: LiveChannelsRouterInput!

    @IBOutlet weak var collectionView: UICollectionView?

    var viewModel: LiveChannels.Load.ViewModel = LiveChannels.Load.ViewModel(liveChannelsViewModels: [])

    weak var delegate: LiveChannelsViewControllerExpandDelegate?

    var videoCell: [Int: ChannelCollectionViewCell] = [:]
    var selectedIndex: Int = 0

    // MARK: - Object lifecycle

    override func awakeFromNib() {
        super.awakeFromNib()
        LiveChannelsConfigurator.sharedInstance.configure(viewController: self)
    }

    // MARK: - View lifecycle

    override func viewDidLoad() {
        super.viewDidLoad()

        collectionViewSetup()
        doSomethingOnLoad()
    }

    func collectionViewSetup() {
        self.collectionView?.register(UINib(nibName: "ChannelCollectionViewCell", bundle: nil), forCellWithReuseIdentifier: channelCollectionCellId)
    }

    // MARK: - Event handling

    func doSomethingOnLoad() {
        let request = LiveChannels.Load.Request()
        output.perform(request: request)
    }

    func selectChannel(channel: LiveChannel) {
        self.delegate?.expandChannel(channel: channel)
    }

    // MARK: - Display logic

    func displaySomething(viewModel: LiveChannels.Load.ViewModel) {
        self.viewModel = viewModel

        self.videoCell.removeAll()
        self.collectionView?.reloadData()

        self.selectChannel(channel: self.viewModel.liveChannelsViewModels[0].liveChannel)
    }

    // MARK: - Collection view data source
    func collectionView(_: UICollectionView, numberOfItemsInSection _: Int) -> Int {
        return self.viewModel.liveChannelsViewModels.count
    }

    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        var cell: ChannelCollectionViewCell

        if let currentCell = self.videoCell[indexPath.row] {
            cell = currentCell
        } else {
            cell = collectionView.dequeueReusableCell(withReuseIdentifier: channelCollectionCellId, for: indexPath) as! ChannelCollectionViewCell
            let model = self.viewModel.liveChannelsViewModels[indexPath.row]
            cell.configure(with: model)

            self.videoCell[indexPath.row] = cell

            #if DEBUG
                cell.accessibilityIdentifier = "channelCell_\(indexPath.row)"
            #endif
        }

        cell.setSelectedState(state: self.selectedIndex == indexPath.row)

        return cell
    }

    func collectionView(_ collectionView: UICollectionView,
                        layout _: UICollectionViewLayout,
                        sizeForItemAt _: IndexPath) -> CGSize {
        let width = (collectionView.width - 50) / 2
        let size = CGSize(width: width, height: collectionView.height)
        return size
    }

    func collectionView(_: UICollectionView, didSelectItemAt indexPath: IndexPath) {
        self.selectedIndex = indexPath.row
        let model = self.viewModel.liveChannelsViewModels[indexPath.row]
        self.selectChannel(channel: model.liveChannel)
        self.collectionView?.reloadData()
    }
}
